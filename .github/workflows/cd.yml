name: CD Workflow

on:
  workflow_run:
    workflows:
      - "CI Workflow" # CI 워크플로우의 이름을 참조
    types:
      - completed

env:
  ECR_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}
  PROFILE: "dev"
  SERVICE: "default"

jobs:
  setup-env:
    runs-on: ubuntu-latest
    outputs:
      profile: ${{ steps.set-env.outputs.profile }}
      service: ${{ steps.set-service.outputs.service }}
    steps:
      - name: Set dynamic PROFILE based on branch
        id: set-env
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "PROFILE=prod" >> $GITHUB_ENV
            echo "::set-output name=profile::prod"
          elif [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "PROFILE=dev" >> $GITHUB_ENV
            echo "::set-output name=profile::dev"
          fi

      - name: Set SERVICE variables
        id: set-service
        run: |
          SERVICE=$(basename ${GITHUB_REPOSITORY})
          echo "SERVICE=${SERVICE}" >> $GITHUB_ENV
          echo "::set-output name=service::${SERVICE}"

  build:
    if: ${{ github.event.workflow_run.event == 'push' }}
    runs-on: ubuntu-latest
    needs: setup-env
    env:
      PROFILE: ${{ needs.setup-env.outputs.profile }}
      SERVICE: ${{ needs.setup-env.outputs.service }}
    steps:
      # 1. GitHub 저장소 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

        # 2. Java 버전 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Set DB_URL based on PROFILE
        run: |
          if [ "${PROFILE}" = "prod" ]; then
            echo "DB_URL=${{ secrets.DB_URL_PROD }}" >> $GITHUB_ENV
          elif [ "${PROFILE}" = "dev" ]; then
            echo "DB_URL=${{ secrets.DB_URL_DEV }}" >> $GITHUB_ENV
          else
            echo "Unknown PROFILE: ${PROFILE}"
            exit 1
          fi

      - name: Create application.yml dynamically
        env: # 환경 변수로 GitHub Secrets 값을 읽어옵니다.
          APP_CONFIG_FILE: src/main/resources/application-${{ env.PROFILE }}.yml
        run: |
          echo "spring:" >> ${APP_CONFIG_FILE}
          echo "  servlet:" >> ${APP_CONFIG_FILE}
          echo "    multipart:" >> ${APP_CONFIG_FILE}
          echo "      max-file-size: 30MB" >> ${APP_CONFIG_FILE}
          echo "      max-request-size: 30MB" >> ${APP_CONFIG_FILE}
          echo "      enabled: true" >> ${APP_CONFIG_FILE}
          echo "  data:" >> ${APP_CONFIG_FILE}
          echo "    web:" >> ${APP_CONFIG_FILE}
          echo "      pageable:" >> ${APP_CONFIG_FILE}
          echo "        max-page-size: 100000" >> ${APP_CONFIG_FILE}
          echo "  datasource:" >> ${APP_CONFIG_FILE}
          echo "    driver-class-name: com.mysql.cj.jdbc.Driver" >> ${APP_CONFIG_FILE}
          echo "    url: ${DB_URL}" >> ${APP_CONFIG_FILE}
          echo "    username: ${{ secrets.DB_USERNAME }}" >> ${APP_CONFIG_FILE}
          echo "    password: ${{ secrets.DB_PASSWORD }}" >> ${APP_CONFIG_FILE}
          echo "  jpa:" >> ${APP_CONFIG_FILE}
          echo "    database: mysql" >> ${APP_CONFIG_FILE}
          echo "    show-sql: false" >> ${APP_CONFIG_FILE}
          echo "    generate-ddl: false" >> ${APP_CONFIG_FILE}
          echo "    hibernate:" >> ${APP_CONFIG_FILE}
          echo "      ddl-auto: none" >> ${APP_CONFIG_FILE}

      # application-S3.properties 생성
      - name: Create aws-s3-config.yml
        env: # 환경 변수로 GitHub Secrets 값을 읽어옵니다.
          APP_CONFIG_FILE: src/main/resources/secrets/aws-s3-config.yml
        run: |
          mkdir -p $(dirname ${APP_CONFIG_FILE}) # 디렉토리가 없으면 생성
          echo "s3:" >> ${APP_CONFIG_FILE}
          echo "  credentials:" >> ${APP_CONFIG_FILE}
          echo "    access-key: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}" >> ${APP_CONFIG_FILE}
          echo "    secret-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}" >> ${APP_CONFIG_FILE}
          echo "  region: ${{ secrets.AWS_REGION }}" >> ${APP_CONFIG_FILE}
          echo "  bucket: ${{ secrets.S3_BUCKET }}" >> ${APP_CONFIG_FILE}

      - name: Create jwt-secret-keys.properties
        env:
          APP_CONFIG_FILE: src/main/resources/secrets/jwt-secret-key.properties
        run: |
          mkdir -p $(dirname ${APP_CONFIG_FILE}) # 디렉토리가 없으면 생성
          echo "jwt.secret=${{ secrets.JWT_SECRET_KEY }}" >> ${APP_CONFIG_FILE}

      - name: Create odcloud-config.yml
        env: # 환경 변수로 GitHub Secrets 값을 읽어옵니다.
          APP_CONFIG_FILE: src/main/resources/secrets/odcloud-config.yml
        run: |
          mkdir -p $(dirname ${APP_CONFIG_FILE}) # 디렉토리가 없으면 생성
          echo "odcloud:" >> ${APP_CONFIG_FILE}
          echo "  encodingKey: ${{ secrets.ODCLOUD_ENCODING_KEY }}" >> ${APP_CONFIG_FILE}
          echo "  decodingKey: ${{ secrets.ODCLOUD_DECODING_KEY }}" >> ${APP_CONFIG_FILE}

      # 3. Gradle 빌드 및 Docker 이미지 생성
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build Docker image
        run: |
          # Gradle 빌드 명령어 실행
          ./gradlew build
          # Docker 이미지 빌드
          docker build -t ${{env.SERVICE}}:${{env.PROFILE}}-latest .
      # 4. AWS 자격증명
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # 5. DockerHub / ECR 로그인
      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # 6. Docker 이미지 ECR에 푸시
      - name: Push Docker image to ECR
        run: |
          docker tag ${{env.SERVICE}}:${{env.PROFILE}}-latest ${ECR_URI}:${{env.PROFILE}}-latest
          docker push ${ECR_URI}:${{env.PROFILE}}-latest
  deploy:
    runs-on: ubuntu-latest
    needs:
      - setup-env
      - build
    env:
      PROFILE: ${{ needs.setup-env.outputs.profile }}
      SERVICE: ${{ needs.setup-env.outputs.service }}
    steps:
      # EC2 인스턴스에 SSH로 접속하여 Docker 이미지 풀 및 실행
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # AWS CLI로 ECR 로그인
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            # 기존 컨테이너가 있다면 종료하고 삭제
            docker stop ${{env.SERVICE}}-${{env.PROFILE}} || true
            docker rm ${{env.SERVICE}}-${{env.PROFILE}} || true
            # 브랜치에 따른 포트 설정
            if [[ ${{env.PROFILE}} == "prod" ]]; then
              PORT=8080
            elif [[ ${{env.PROFILE}} == "dev" ]]; then
              PORT=8081
            else
              PORT=8080
            fi

            echo "Deploying ${{env.SERVICE}} to port ${PORT} with profile ${{env.PROFILE}}"
            
            # ECR에서 Docker 이미지 풀
            docker pull ${{env.ECR_URI}}:${{env.PROFILE}}-latest

            # Docker 컨테이너 실행
            docker run -d \
            --name ${{env.SERVICE}}-${{env.PROFILE}} \
            -p ${PORT}:${PORT} \
            -e SPRING_PROFILES_ACTIVE=${{env.PROFILE}} \
            ${{ env.ECR_URI }}:${{env.PROFILE}}-latest
