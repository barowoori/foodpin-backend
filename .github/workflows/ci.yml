name: CI Workflow

on:
  push:
    branches:
      - "dev"
      - "main"
  pull_request:
    branches:
      - "dev"
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Java 설정 (Gradle 빌드에 사용할 JDK 버전 설정)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정 (의존성 캐시를 통해 빌드 속도 향상)
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # application-S3.properties 생성
      - name: Create aws-s3-config.yml
        env: # 환경 변수로 GitHub Secrets 값을 읽어옵니다.
          APP_CONFIG_FILE: src/main/resources/secrets/aws-s3-config.yml
        run: |
          mkdir -p $(dirname ${APP_CONFIG_FILE}) # 디렉토리가 없으면 생성
          echo "s3:" >> ${APP_CONFIG_FILE}
          echo "  credentials:" >> ${APP_CONFIG_FILE}
          echo "    access-key: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}" >> ${APP_CONFIG_FILE}
          echo "    secret-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}" >> ${APP_CONFIG_FILE}
          echo "  region: ${{ secrets.AWS_REGION }}" >> ${APP_CONFIG_FILE}
          echo "  bucket: ${{ secrets.S3_BUCKET }}" >> ${APP_CONFIG_FILE}

      - name: Create jwt-secret-keys.properties
        env:
          APP_CONFIG_FILE: src/main/resources/secrets/jwt-secret-key.properties
        run: |
          mkdir -p $(dirname ${APP_CONFIG_FILE}) # 디렉토리가 없으면 생성
          echo "jwt.secret=${{ secrets.JWT_SECRET_KEY }}" >> ${APP_CONFIG_FILE}

      - name: Create odcloud-config.yml
        env: # 환경 변수로 GitHub Secrets 값을 읽어옵니다.
          APP_CONFIG_FILE: src/main/resources/secrets/odcloud-config.yml
        run: |
          mkdir -p $(dirname ${APP_CONFIG_FILE}) # 디렉토리가 없으면 생성
          echo "odcloud:" >> ${APP_CONFIG_FILE}
          echo "  encodingKey: ${{ secrets.ODCLOUD_ENCODING_KEY }}" >> ${APP_CONFIG_FILE}
          echo "  decodingKey: ${{ secrets.ODCLOUD_DECODING_KEY }}" >> ${APP_CONFIG_FILE}

      - name: create firebase-adminsdk.json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "foodpin-d001c-firebase-adminsdk-idqc0-9e68a6effd.json"
          json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          dir: './src/main/resources/secrets'

      # 4. Gradle 빌드 및 테스트 실행
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build and test with Gradle
        run: |
          ./gradlew clean build
          ./gradlew test

      # 5. 테스트 결과 출력
      - name: Upload Test Results
        if: failure()  # 실패한 경우에만 결과를 업로드합니다.
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test

      # 6. 빌드 결과 출력 (예: JAR 파일 위치)
      - name: Upload Build Artifacts
        if: success()  # 성공한 경우에만 업로드
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs

  notify-discord:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 2. Discord 알림 (빌드 성공/실패)
      - name: Notify Discord
        uses: ./.github/actions/notify-discord
        with:
          branch-type : ${{ github.ref_name }}
          build-result : ${{ needs.build.result }}
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
